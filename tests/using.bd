create funct using(file,global=B1,compile=B0){
	create var libdir array_item(dirsarray,'lib');
	create var packagedir array_item(dirsarray,'package');
	create var ld = B0;
	pyparse `var['pathdt'] = {'type':'bool','dt':Path('./.bdusingcompile/@{file}.cbd').is_file(),'headers':{}}`;
	if(pathdt){		
		create var dt = fread(`./.bdusingcompile/@{file}.cbd`);
		pyparse `var['dt']['type'] = 'binary'`;
		create var dt = dt.decode();
	};
	else{
	if(exists usingpasswd){
		create var passwd B1;
	};
	else{
		create var passwd B0;
	};
	create class dt(static){
	pyparse `try:
	if '''@{@fn}''' == '''@{file}''':
		raise FileNotFoundError('')
	else:
		open('@{file}')
		parse(open('@{file}').read())
except FileNotFoundError:
	try:
		open('@{libdir}@{file}')
		var['ld'] = {'type':'bool','dt':'True','headers':{}}
		parse(open('@{libdir}@{file}').read())
	except FileNotFoundError:
		try:
			open('@{packagedir}/@{file}/passwd.txt')
			if eval(var['passwd']['dt']):
				passwd = base64.b64decode(open('@{packagedir}/@{file}/passwd.txt').read()).decode('utf-8')
				if var['usingpasswd']['dt'] == passwd:
					parse(open('@{packagedir}/@{file}/main.bd').read())
		except:
			parse(open('@{packagedir}@{file}/main.bd').read())`;
	};
	};
	if(compile){
		if(pathdt){
			fwrite(`.bdusingcompile/@{file}.cbd`,tostring dt,'w');
		};
		else{
			pyparse `os.mkdir('.bdusingcompile')`;
			fwrite(`.bdusingcompile/@{file}.cbd`,tostring dt,'w');
		};
	};
	if (ld){
	foreach(n,f of dt){
		pyparse	`
if 'req_pyparse' in var['dt']['dt'][var['n']['dt']]['dt']['head']:
	var['dt']['dt'][var['n']['dt']]['dt']['head']['pyparse'] = 'true'
`;
	};
	};
	if(global){
		foreach(n,item of dt){
			pyparse `gvar['@{n}'] = var['item']`;
		};
	};
	else{
	return dt;
	};
}[global=];
create funct output(){
pyparse `print(gvar['using'])`;
}[req_pyparse=true];
create var output = output.allow('pyparse');
output()