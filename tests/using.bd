create funct using(file,global=B1,compile=B1){
	create var libdir array_item(dirsarray,'lib');
	create var packagedir array_item(dirsarray,'package');
	pyparse `var['pathdt'] = {'type':'bool','dt':Path('.bdusingcompile/@{file}.cbd').is_file()}`;
	if(pathdt){
		pyparse `var['dt'] = {'type':'class','dt':le(base64.b64decode(open(".bdusingcompile/@{file}.cbd").read().encode('utf-8')).decode('utf-8'))}`;
	};
	else{
	if(exists usingpasswd){
		create var passwd B1;
	};
	else{
		create var passwd B0;
	};
	create class dt(static){
	pyparse `try:
	if '''@{@fn}''' == '''@{file}''':
		raise FileNotFoundError('')
	else:
		open('@{file}')
		parse(open('@{file}').read())
except FileNotFoundError:
	try:
		open('@{libdir}@{file}')
		parse(open('@{libdir}@{file}').read())
	except FileNotFoundError:
		try:
			open('@{packagedir}/@{file}/passwd.txt')
			if eval(var['passwd']['dt']):
				passwd = base64.b64decode(open('@{packagedir}/@{file}/passwd.txt').read()).decode('utf-8')
				if var['usingpasswd']['dt'] == passwd:
					parse(open('@{packagedir}/@{file}/main.bd').read())
		except:
			parse(open('@{packagedir}@{file}/main.bd').read())`;
	};
	};
	if(compile){
		if(`Path('.bdusingcompile').is_dir()`){
			fwrite(`.bdusingcompile/@{file}.cbd`,tostring dt,'w');
		};
		else{
			pyparse `os.mkdir('.bdusingcompile')`;
			fwrite(`.bdusingcompile/@{file}.cbd`,tostring dt,'w');
		};
	};
	if(global){
		foreach(n,item of dt){
			pyparse `gvar['@{n}'] = var['item']`;
		};
	};
	else{
	return dt;
	};
}[global=];
//pyparse `print(gvar)`;//
create var i using('stdio.bd',B0);
i.writeout('a');