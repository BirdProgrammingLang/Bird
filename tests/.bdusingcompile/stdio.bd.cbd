{'writeout': {'type': 'funct', 'dt': {'attrib': {'text': ['', ''], 'end': ['string', '\\n'], 'sep': ['string', ' '], 'flush': ['string', 'False']}, 'code': ";pyparse `try:\n\tif '''@{@fn}''' == '''@{file}''':\n\t\traise FileNotFoundError('')\n\telse:\n\t\topen('@{file}')\n\t\tparse(open('@{file}').read())\nexcept FileNotFoundError:\n\ttry:\n\t\topen('@{libdir}@{file}')\n\t\tparse(open('@{libdir}@{file}').read())\n\texcept FileNotFoundError:\n\t\ttry:\n\t\t\topen('@{packagedir}/@{file}/passwd.txt')\n\t\t\tif eval(var['passwd']['dt']):\n\t\t\t\tpasswd = base64.b64decode(open('@{packagedir}/@{file}/passwd.txt').read()).decode('utf-8')\n\t\t\t\tif var['usingpasswd']['dt'] == passwd:\n\t\t\t\t\tparse(open('@{packagedir}/@{file}/main.bd').read())\n\t\texcept:\n\t\t\tparse(open('@{packagedir}@{file}/main.bd').read())`;pyparse `print('''@{text}''',end='@{end}',sep='@{sep}',flush=@{flush})`", 'head': {'sep': ':', 'scb': '\\scb', 'ecb': '\\ecb'}}}, 'writein': {'type': 'funct', 'dt': {'attrib': {'text': ['string', '']}, 'code': "pyparse `var['data'] = {'type':'string','dt':input('@{text}')}`;return data", 'head': {'sep': ':', 'scb': '\\scb', 'ecb': '\\ecb', 'global': ''}}}}